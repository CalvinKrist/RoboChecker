// GRID WORLD MODEL OF ROBOT AND JANITOR
// Hakan Younes/gxn/dxp 04/05/04

mdp

// CONSTANTS
const int n = 10; // size of the grid

// the following formulae return 1 or 0 depending on whether
// the robot can move in that direction or not
formula right = min(1,max(n-x2,0));
formula left = min(1,max(x2-1,0));
formula up = min(1,max(n-y2,0));
formula down = min(1,max(y2-1,0));

formula ur = min(1, min(max(n-x2,0), max(n-y2,0) ) );
formula ul = min(1, min(max(x2-1,0), max(n-y2,0) ) );
formula dr = min(1, min(max(n-x2,0), max(y2-1,0) ) );
formula dl = min(1, min(max(x2-1,0), max(y2-1,0) ) );

//module obstacle
	
//	x1 : int init 2;
  //  y1 : int init 2;
	
//endmodule

module random_robot
	
    // what about obstacles???
    
    x2 : [1..n] init 1; // x position of robot
    y2 : [1..n] init 1; // y position of robot
    dir: [0..7] init 0; // 1 = up, 2 = up-right, 3 = right ...
    
    // Try to go up
    [] (dir=0 & up=1) -> 1 : (y2'=y2+1);
    // Can't: choose random new direction
    [] (dir=0 & up=0) -> 1/8 : (dir'=0) 
		+ 1/8 : (dir'=1) 
		+ 1/8 : (dir'=2) 
            + 1/8 : (dir'=3) 
            + 1/8 : (dir'=4)
            + 1/8 : (dir'=5)
            + 1/8 : (dir'=6)
            + 1/8 : (dir'=7);
    
    [] (dir=1 & ur=1) -> 1 : (y2'=y2+1) & (x2'=x2+1);
    [] (dir=1 & ur=0) -> 1/8 : (dir'=0) 
		+ 1/8 : (dir'=1) 
		+ 1/8 : (dir'=2) 
            + 1/8 : (dir'=3) 
            + 1/8 : (dir'=4)
            + 1/8 : (dir'=5)
            + 1/8 : (dir'=6)
            + 1/8 : (dir'=7);
    
    [] (dir=2 & right=1) -> 1 : (x2'=x2+1);
    [] (dir=2 & right=0) -> 1/8 : (dir'=0) 
		+ 1/8 : (dir'=1) 
		+ 1/8 : (dir'=2) 
            + 1/8 : (dir'=3) 
            + 1/8 : (dir'=4)
            + 1/8 : (dir'=5)
            + 1/8 : (dir'=6)
            + 1/8 : (dir'=7);
    
    [] (dir=3 & dr=1) -> 1 : (y2'=y2-1) & (x2'=x2+1);
    [] (dir=3 & dr=0) -> 1/8 : (dir'=0) 
		+ 1/8 : (dir'=1) 
		+ 1/8 : (dir'=2) 
            + 1/8 : (dir'=3) 
            + 1/8 : (dir'=4)
            + 1/8 : (dir'=5)
            + 1/8 : (dir'=6)
            + 1/8 : (dir'=7);
    
    [] (dir=4 & down=1) -> 1 : (y2'=y2-1);
    [] (dir=4 & down=0) -> 1/8 : (dir'=0) 
		+ 1/8 : (dir'=1) 
		+ 1/8 : (dir'=2) 
            + 1/8 : (dir'=3) 
            + 1/8 : (dir'=4)
            + 1/8 : (dir'=5)
            + 1/8 : (dir'=6)
            + 1/8 : (dir'=7);
    
    [] (dir=5 & dl=1) -> 1 : (y2'=y2-1) & (x2'=x2-1);
    [] (dir=5 & dl=0) -> 1/8 : (dir'=0) 
		+ 1/8 : (dir'=1) 
		+ 1/8 : (dir'=2) 
            + 1/8 : (dir'=3) 
            + 1/8 : (dir'=4)
            + 1/8 : (dir'=5)
            + 1/8 : (dir'=6)
            + 1/8 : (dir'=7);
    
    [] (dir=6 & left=1) -> 1 : (x2'=x2-1);
    [] (dir=6 & left=0) -> 1/8 : (dir'=0) 
		+ 1/8 : (dir'=1) 
		+ 1/8 : (dir'=2) 
            + 1/8 : (dir'=3) 
            + 1/8 : (dir'=4)
            + 1/8 : (dir'=5)
            + 1/8 : (dir'=6)
            + 1/8 : (dir'=7);
    
    [] (dir=7 & ul=1) -> 1 : (y2'=y2+1) & (x2'=x2-1);
    [] (dir=7 & ul=0) -> 1/8 : (dir'=0) 
		+ 1/8 : (dir'=1) 
		+ 1/8 : (dir'=2) 
            + 1/8 : (dir'=3) 
            + 1/8 : (dir'=4)
            + 1/8 : (dir'=5)
            + 1/8 : (dir'=6)
            + 1/8 : (dir'=7);


endmodule