mdp

//CONSTANTS
const int w = 10;
const int h = 25;

//Formula for checking if the robot can move along each angle
formula moveA0 = (((w-x2) >= 9) & ((y2) > 0)) & (((w-x2) >= 7) & ((y2) > 0)) & (((w-x2) >= 3) & ((y2) > 0)) & (((w-x2) >= 8) & ((y2) > 0)) & (((w-x2) >= 6) & ((y2) > 0)) & (((w-x2) >= 2) & ((y2) > 0)) & (((w-x2) >= 5) & ((y2) > 0)) & (((w-x2) >= 1) & ((y2) > 0)) & (((w-x2) >= 4) & ((y2) > 0)) & (((w-x2) >= 10) & ((y2) > 0));
formula moveA1 = (((w-x2) >= 3) & ((h-y2) >= 3)) & (((w-x2) >= 5) & ((h-y2) >= 5)) & (((w-x2) >= 6) & ((h-y2) >= 6)) & (((w-x2) >= 2) & ((h-y2) >= 2)) & (((w-x2) >= 4) & ((h-y2) >= 4)) & (((w-x2) >= 1) & ((h-y2) >= 1)) & (((w-x2) >= 7) & ((h-y2) >= 7));
formula moveA2 = (((x2) > 0) & ((h-y2) >= 1)) & (((x2) > 0) & ((h-y2) >= 7)) & (((x2) > 0) & ((h-y2) >= 6)) & (((x2) > 0) & ((h-y2) >= 5)) & (((x2) > 0) & ((h-y2) >= 4)) & (((x2) > 0) & ((h-y2) >= 9)) & (((x2) > 0) & ((h-y2) >= 3)) & (((x2) > 0) & ((h-y2) >= 8)) & (((x2) > 0) & ((h-y2) >= 2)) & (((x2) > 0) & ((h-y2) >= 10));
formula moveA3 = (((x2-1) > 0) & ((h-y2) >= 1)) & (((x2-4) > 0) & ((h-y2) >= 4)) & (((x2-6) > 0) & ((h-y2) >= 6)) & (((x2-5) > 0) & ((h-y2) >= 5)) & (((x2-2) > 0) & ((h-y2) >= 2)) & (((x2-3) > 0) & ((h-y2) >= 3)) & (((x2-7) > 0) & ((h-y2) >= 7));
formula moveA4 = (((x2-5) > 0) & ((y2) > 0)) & (((x2-2) > 0) & ((y2) > 0)) & (((x2-1) > 0) & ((y2) > 0)) & (((x2-6) > 0) & ((y2) > 0)) & (((x2-3) > 0) & ((y2) > 0)) & (((x2-7) > 0) & ((y2) > 0)) & (((x2-9) > 0) & ((y2) > 0)) & (((x2-4) > 0) & ((y2) > 0)) & (((x2-8) > 0) & ((y2) > 0)) & (((x2-10) > 0) & ((y2) > 0));
formula moveA5 = (((x2-3) > 0) & ((y2-3) > 0)) & (((x2-5) > 0) & ((y2-5) > 0)) & (((x2-6) > 0) & ((y2-6) > 0)) & (((x2-2) > 0) & ((y2-2) > 0)) & (((x2-1) > 0) & ((y2-1) > 0)) & (((x2-4) > 0) & ((y2-4) > 0)) & (((x2-7) > 0) & ((y2-7) > 0));
formula moveA6 = (((x2) > 0) & ((y2-5) > 0)) & (((x2) > 0) & ((y2-6) > 0)) & (((x2) > 0) & ((y2-7) > 0)) & (((x2) > 0) & ((y2-8) > 0)) & (((x2) > 0) & ((y2-2) > 0)) & (((x2) > 0) & ((y2-1) > 0)) & (((x2) > 0) & ((y2-3) > 0)) & (((x2) > 0) & ((y2-9) > 0)) & (((x2) > 0) & ((y2-4) > 0)) & (((x2) > 0) & ((y2-10) > 0));
formula moveA7 = (((w-x2) >= 6) & ((y2-6) > 0)) & (((w-x2) >= 4) & ((y2-4) > 0)) & (((w-x2) >= 3) & ((y2-3) > 0)) & (((w-x2) >= 5) & ((y2-5) > 0)) & (((w-x2) >= 2) & ((y2-2) > 0)) & (((w-x2) >= 1) & ((y2-1) > 0)) & (((w-x2) >= 7) & ((y2-7) > 0));

module random_robot

        x2 : [1..10] init 1; // robot x position
        y2 : [1..25] init 1; // robot y position
        dir : [0..7] init 0; // possible robot directions

        // Movement transitions when robot can move
        [] (dir=0 & moveA0) -> 1 : (x2'=x2+10) & (y2'=y2);
        [] (dir=1 & moveA1) -> 1 : (x2'=x2+7) & (y2'=y2+7);
        [] (dir=2 & moveA2) -> 1 : (x2'=x2) & (y2'=y2+10);
        [] (dir=3 & moveA3) -> 1 : (x2'=x2-7) & (y2'=y2+7);
        [] (dir=4 & moveA4) -> 1 : (x2'=x2-10) & (y2'=y2);
        [] (dir=5 & moveA5) -> 1 : (x2'=x2-7) & (y2'=y2-7);
        [] (dir=6 & moveA6) -> 1 : (x2'=x2) & (y2'=y2-10);
        [] (dir=7 & moveA7) -> 1 : (x2'=x2+7) & (y2'=y2-7);

        // Movement transitions when robot can't move
        [] (dir=0 & !moveA0) -> 1 / 8 : (dir'=0) + 1 / 8 : (dir'=1) + 1 / 8 : (dir'=2) + 1 / 8 : (dir'=3) + 1 / 8 : (dir'=4) + 1 / 8 : (dir'=5) + 1 / 8 : (dir'=6) + 1 / 8 : (dir'=7);
        [] (dir=1 & !moveA1) -> 1 / 8 : (dir'=0) + 1 / 8 : (dir'=1) + 1 / 8 : (dir'=2) + 1 / 8 : (dir'=3) + 1 / 8 : (dir'=4) + 1 / 8 : (dir'=5) + 1 / 8 : (dir'=6) + 1 / 8 : (dir'=7);
        [] (dir=2 & !moveA2) -> 1 / 8 : (dir'=0) + 1 / 8 : (dir'=1) + 1 / 8 : (dir'=2) + 1 / 8 : (dir'=3) + 1 / 8 : (dir'=4) + 1 / 8 : (dir'=5) + 1 / 8 : (dir'=6) + 1 / 8 : (dir'=7);
        [] (dir=3 & !moveA3) -> 1 / 8 : (dir'=0) + 1 / 8 : (dir'=1) + 1 / 8 : (dir'=2) + 1 / 8 : (dir'=3) + 1 / 8 : (dir'=4) + 1 / 8 : (dir'=5) + 1 / 8 : (dir'=6) + 1 / 8 : (dir'=7);
        [] (dir=4 & !moveA4) -> 1 / 8 : (dir'=0) + 1 / 8 : (dir'=1) + 1 / 8 : (dir'=2) + 1 / 8 : (dir'=3) + 1 / 8 : (dir'=4) + 1 / 8 : (dir'=5) + 1 / 8 : (dir'=6) + 1 / 8 : (dir'=7);
        [] (dir=5 & !moveA5) -> 1 / 8 : (dir'=0) + 1 / 8 : (dir'=1) + 1 / 8 : (dir'=2) + 1 / 8 : (dir'=3) + 1 / 8 : (dir'=4) + 1 / 8 : (dir'=5) + 1 / 8 : (dir'=6) + 1 / 8 : (dir'=7);
        [] (dir=6 & !moveA6) -> 1 / 8 : (dir'=0) + 1 / 8 : (dir'=1) + 1 / 8 : (dir'=2) + 1 / 8 : (dir'=3) + 1 / 8 : (dir'=4) + 1 / 8 : (dir'=5) + 1 / 8 : (dir'=6) + 1 / 8 : (dir'=7);
        [] (dir=7 & !moveA7) -> 1 / 8 : (dir'=0) + 1 / 8 : (dir'=1) + 1 / 8 : (dir'=2) + 1 / 8 : (dir'=3) + 1 / 8 : (dir'=4) + 1 / 8 : (dir'=5) + 1 / 8 : (dir'=6) + 1 / 8 : (dir'=7);

endmodule